class Trie {
    private TrieNode root;

    /** Initialize your data structure here. */
    public Trie() {
        root = new TrieNode();
    }
    
    /** Inserts a word into the trie. */
    public void insert(String word) {
        TrieNode p = root;
        for(int i=0; i<word.length(); i++) {
            char c = word.charAt(i);
            int index = c-'a';
            
            if(p.children[index]==null) {
                TrieNode temp = new TrieNode();
                p.children[index] = temp;
                p = temp;
            } else {
                p = p.children[index];
            }
        }
        p.isEnd = true;
    }
    
    /** Returns if the word is in the trie. */
    public boolean search(String word) {
        TrieNode p = searchNode(word);
        if(p==null) return false;
        else if(p.isEnd) return true;
        return false;
    }
    
    public TrieNode searchNode(String s) {
        TrieNode p = root;
        for(int i=0; i<s.length(); i++) {
            char c = s.charAt(i);
            int index = c-'a';
            
            if(p.children[index]!=null) {
                p = p.children[index];
            } else return null;
            
            if(p==null) return null;
        }
        return p;
    }
    
    /** Returns if there is any word in the trie that starts with the given prefix. */
    public boolean startsWith(String prefix) {
        TrieNode p = searchNode(prefix);
        if(p==null) return false;
        else return true;
    }
}

class TrieNode {
    TrieNode[] children;
    boolean isEnd;
    public TrieNode() {
        children = new TrieNode[26];
    }
}
