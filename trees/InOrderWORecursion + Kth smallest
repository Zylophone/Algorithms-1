package com.iamtrk.trees;

import java.util.ArrayList;
import java.util.List;
import java.util.Stack;

/**
 *
 *           6
          /    \
         3      7
        / \      \
       2   5      9

 [2, 3, 5, 6, 7, 9]
 *
 */
public class InOrderWORecursion {
    public ArrayList<Integer> inorderTraversal(TreeNode A) {
        ArrayList<Integer> result = new ArrayList<Integer>();
        if(A == null) return result;
        
        Stack<TreeNode> stack = new Stack<>();
        while(!stack.isEmpty() || A!=null) {
            if(A!=null) {
                stack.push(A);
                A=A.left;
            } else {
                TreeNode t = stack.pop();
                      // Here the logic can be changed to get the Kth smallest element.
                      // If we are looking for Kth smallest element, reduce the k value
                      // each time stack.pop happened. return when k==0.
                      // i.e k--; if(k==0) result = t.val;
                result.add(t.val);
                A=t.right;
            }
        }   
        return result;
    }
          
    public static void main(String[] args) {
        TreeNode a = new TreeNode(2);
        TreeNode b = new TreeNode(3);
        TreeNode c = new TreeNode(6);
        TreeNode d = new TreeNode(5);
        TreeNode e = new TreeNode(7);
        TreeNode f = new TreeNode(9);

        e.right = f;
        c.right = e;
        c.left = b;
        b.left = a;
        b.right = d;

        InOrderWORecursion recursion = new InOrderWORecursion();
        System.out.println(recursion.inorder(c));

    }
}
